Qflow synthesis logfile created on Mon Jan 6 19:52:53 WIB 2025
Running yosys for verilog parsing and synthesis
yosys  -s vending_machine_18105070.ys

 /----------------------------------------------------------------------------\
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |  Copyright (C) 2012 - 2024  Claire Xenia Wolf <claire@yosyshq.com>         |
 |  Distributed under an ISC-like license, type "license" to see terms        |
 \----------------------------------------------------------------------------/
 Yosys 0.46+107 (git sha1 a54f63225, g++ 8.5.0 -fPIC -O3)

-- Executing script file `vending_machine_18105070.ys' --

1. Executing Liberty frontend: /usr/local/share/qflow/tech/osu035/osu035_stdcells.lib
Imported 39 cell types from liberty file.

2. Executing Verilog-2005 frontend: /home/asd01a/Documents/Kelompok_5/source/vending_machine_18105070.v
Parsing Verilog input from `/home/asd01a/Documents/Kelompok_5/source/vending_machine_18105070.v' to AST representation.
Generating RTLIL representation for module `\vending_machine_18105070'.
Successfully finished Verilog frontend.

3. Executing SYNTH pass.

3.1. Executing HIERARCHY pass (managing design hierarchy).

3.1.1. Analyzing design hierarchy..
Top module:  \vending_machine_18105070

3.1.2. Analyzing design hierarchy..
Top module:  \vending_machine_18105070
Removed 0 unused modules.

3.2. Executing PROC pass (convert processes to netlists).

3.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

3.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 11 switch rules as full_case in process $proc$/home/asd01a/Documents/Kelompok_5/source/vending_machine_18105070.v:15$1 in module vending_machine_18105070.
Removed a total of 0 dead cases.

3.2.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 4 assignments to connections.

3.2.4. Executing PROC_INIT pass (extract init attributes).

3.2.5. Executing PROC_ARST pass (detect async resets in processes).

3.2.6. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.
<suppressed ~11 debug messages>

3.2.7. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\vending_machine_18105070.$proc$/home/asd01a/Documents/Kelompok_5/source/vending_machine_18105070.v:15$1'.
     1/33: $11\change[1:0]
     2/33: $10\out[0:0]
     3/33: $11\n_state[1:0]
     4/33: $10\change[1:0]
     5/33: $9\out[0:0]
     6/33: $10\n_state[1:0]
     7/33: $9\change[1:0]
     8/33: $8\out[0:0]
     9/33: $9\n_state[1:0]
    10/33: $8\change[1:0]
    11/33: $7\out[0:0]
    12/33: $8\n_state[1:0]
    13/33: $7\change[1:0]
    14/33: $6\out[0:0]
    15/33: $7\n_state[1:0]
    16/33: $6\change[1:0]
    17/33: $5\out[0:0]
    18/33: $6\n_state[1:0]
    19/33: $5\change[1:0]
    20/33: $4\out[0:0]
    21/33: $5\n_state[1:0]
    22/33: $4\change[1:0]
    23/33: $3\out[0:0]
    24/33: $4\n_state[1:0]
    25/33: $3\change[1:0]
    26/33: $2\out[0:0]
    27/33: $3\n_state[1:0]
    28/33: $2\n_state[1:0]
    29/33: $2\change[1:0]
    30/33: $1\out[0:0]
    31/33: $1\change[1:0]
    32/33: $1\n_state[1:0]
    33/33: $1\c_state[1:0]

3.2.8. Executing PROC_DLATCH pass (convert process syncs to latches).

3.2.9. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\vending_machine_18105070.\out' using process `\vending_machine_18105070.$proc$/home/asd01a/Documents/Kelompok_5/source/vending_machine_18105070.v:15$1'.
  created $dff cell `$procdff$306' with positive edge clock.
Creating register for signal `\vending_machine_18105070.\change' using process `\vending_machine_18105070.$proc$/home/asd01a/Documents/Kelompok_5/source/vending_machine_18105070.v:15$1'.
  created $dff cell `$procdff$307' with positive edge clock.
Creating register for signal `\vending_machine_18105070.\c_state' using process `\vending_machine_18105070.$proc$/home/asd01a/Documents/Kelompok_5/source/vending_machine_18105070.v:15$1'.
  created $dff cell `$procdff$308' with positive edge clock.
Creating register for signal `\vending_machine_18105070.\n_state' using process `\vending_machine_18105070.$proc$/home/asd01a/Documents/Kelompok_5/source/vending_machine_18105070.v:15$1'.
  created $dff cell `$procdff$309' with positive edge clock.

3.2.10. Executing PROC_MEMWR pass (convert process memory writes to cells).

3.2.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 11 empty switches in `\vending_machine_18105070.$proc$/home/asd01a/Documents/Kelompok_5/source/vending_machine_18105070.v:15$1'.
Removing empty process `vending_machine_18105070.$proc$/home/asd01a/Documents/Kelompok_5/source/vending_machine_18105070.v:15$1'.
Cleaned up 11 empty switches.

3.2.12. Executing OPT_EXPR pass (perform const folding).
Optimizing module vending_machine_18105070.
<suppressed ~16 debug messages>

3.3. Executing OPT_EXPR pass (perform const folding).
Optimizing module vending_machine_18105070.

3.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \vending_machine_18105070..
Removed 1 unused cells and 96 unused wires.
<suppressed ~3 debug messages>

3.5. Executing CHECK pass (checking for obvious problems).
Checking module vending_machine_18105070...
Found and reported 0 problems.

3.6. Executing OPT pass (performing simple optimizations).

3.6.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module vending_machine_18105070.

3.6.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\vending_machine_18105070'.
<suppressed ~117 debug messages>
Removed a total of 39 cells.

3.6.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \vending_machine_18105070..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 2/2 on $mux $procmux$167.
    dead port 1/2 on $mux $procmux$17.
    dead port 2/2 on $mux $procmux$174.
    dead port 1/2 on $mux $procmux$102.
    dead port 2/2 on $mux $procmux$181.
    dead port 2/2 on $mux $procmux$104.
    dead port 1/2 on $mux $procmux$190.
    dead port 1/2 on $mux $procmux$193.
    dead port 2/2 on $mux $procmux$195.
    dead port 1/2 on $mux $procmux$20.
    dead port 1/2 on $mux $procmux$204.
    dead port 1/2 on $mux $procmux$207.
    dead port 2/2 on $mux $procmux$209.
    dead port 1/2 on $mux $procmux$218.
    dead port 2/2 on $mux $procmux$22.
    dead port 1/2 on $mux $procmux$221.
    dead port 2/2 on $mux $procmux$223.
    dead port 1/2 on $mux $procmux$232.
    dead port 2/2 on $mux $procmux$234.
    dead port 1/2 on $mux $procmux$112.
    dead port 1/2 on $mux $procmux$243.
    dead port 2/2 on $mux $procmux$245.
    dead port 1/2 on $mux $procmux$115.
    dead port 1/2 on $mux $procmux$254.
    dead port 2/2 on $mux $procmux$256.
    dead port 2/2 on $mux $procmux$117.
    dead port 2/2 on $mux $procmux$264.
    dead port 2/2 on $mux $procmux$272.
    dead port 2/2 on $mux $procmux$280.
    dead port 1/2 on $mux $procmux$125.
    dead port 1/2 on $mux $procmux$128.
    dead port 2/2 on $mux $procmux$130.
    dead port 1/2 on $mux $procmux$29.
    dead port 1/2 on $mux $procmux$138.
    dead port 2/2 on $mux $procmux$140.
    dead port 1/2 on $mux $procmux$32.
    dead port 2/2 on $mux $procmux$34.
    dead port 1/2 on $mux $procmux$148.
    dead port 1/2 on $mux $procmux$41.
    dead port 1/2 on $mux $procmux$44.
    dead port 2/2 on $mux $procmux$46.
    dead port 2/2 on $mux $procmux$150.
    dead port 1/2 on $mux $procmux$53.
    dead port 2/2 on $mux $procmux$55.
    dead port 1/2 on $mux $procmux$62.
    dead port 2/2 on $mux $procmux$64.
    dead port 1/2 on $mux $procmux$71.
    dead port 2/2 on $mux $procmux$73.
    dead port 1/2 on $mux $procmux$158.
    dead port 2/2 on $mux $procmux$79.
    dead port 2/2 on $mux $procmux$160.
    dead port 2/2 on $mux $procmux$85.
    dead port 2/2 on $mux $procmux$91.
    dead port 1/2 on $mux $procmux$99.
Removed 54 multiplexer ports.
<suppressed ~6 debug messages>

3.6.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \vending_machine_18105070.
Performed a total of 0 changes.

3.6.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\vending_machine_18105070'.
<suppressed ~15 debug messages>
Removed a total of 5 cells.

3.6.6. Executing OPT_DFF pass (perform DFF optimizations).

3.6.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \vending_machine_18105070..
Removed 0 unused cells and 98 unused wires.
<suppressed ~1 debug messages>

3.6.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module vending_machine_18105070.

3.6.9. Rerunning OPT passes. (Maybe there is more to do..)

3.6.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \vending_machine_18105070..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~8 debug messages>

3.6.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \vending_machine_18105070.
Performed a total of 0 changes.

3.6.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\vending_machine_18105070'.
Removed a total of 0 cells.

3.6.13. Executing OPT_DFF pass (perform DFF optimizations).

3.6.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \vending_machine_18105070..

3.6.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module vending_machine_18105070.

3.6.16. Finished OPT passes. (There is nothing left to do.)

3.7. Executing FSM pass (extract and optimize FSM).

3.7.1. Executing FSM_DETECT pass (finding FSMs in design).
Not marking vending_machine_18105070.change as FSM state register:
    Register is connected to module port.
    Users of register don't seem to benefit from recoding.
Found FSM state register vending_machine_18105070.n_state.

3.7.2. Executing FSM_EXTRACT pass (extracting FSM from design).
Extracting FSM `\n_state' from module `\vending_machine_18105070'.
  found $dff cell for state register: $procdff$309
  root of input selection tree: $0\n_state[1:0]
  found ctrl input: $procmux$23_CMP
  found ctrl input: $procmux$105_CMP
  found ctrl input: $procmux$196_CMP
  found ctrl input: \rst
  found state code: 2'00
  found ctrl input: $eq$/home/asd01a/Documents/Kelompok_5/source/vending_machine_18105070.v:26$3_Y
  found ctrl input: $eq$/home/asd01a/Documents/Kelompok_5/source/vending_machine_18105070.v:30$4_Y
  found ctrl input: $eq$/home/asd01a/Documents/Kelompok_5/source/vending_machine_18105070.v:34$5_Y
  found state code: 2'10
  found state code: 2'01
  ctrl inputs: { $procmux$196_CMP $procmux$105_CMP $procmux$23_CMP $eq$/home/asd01a/Documents/Kelompok_5/source/vending_machine_18105070.v:34$5_Y $eq$/home/asd01a/Documents/Kelompok_5/source/vending_machine_18105070.v:30$4_Y $eq$/home/asd01a/Documents/Kelompok_5/source/vending_machine_18105070.v:26$3_Y \rst }
  ctrl outputs: $0\n_state[1:0]
  transition:       2'00 7'000---0 ->       2'00 2'00
  transition:       2'00 7'000---1 ->       2'00 2'00
  transition:       2'00 7'1--0000 ->       2'00 2'00
  transition:       2'00 7'1--0001 ->       2'00 2'00
  transition:       2'00 7'1--100- ->       2'10 2'10
  transition:       2'00 7'1---10- ->       2'01 2'01
  transition:       2'00 7'1----1- ->       2'00 2'00
  transition:       2'00 7'-1-0000 ->       2'00 2'00
  transition:       2'00 7'-1-0001 ->       2'00 2'00
  transition:       2'00 7'-1-100- ->       2'00 2'00
  transition:       2'00 7'-1--10- ->       2'10 2'10
  transition:       2'00 7'-1---1- ->       2'00 2'00
  transition:       2'00 7'--10000 ->       2'00 2'00
  transition:       2'00 7'--10001 ->       2'00 2'00
  transition:       2'00 7'--1100- ->       2'00 2'00
  transition:       2'00 7'--1-10- ->       2'00 2'00
  transition:       2'00 7'--1--1- ->       2'00 2'00
  transition:       2'10 7'000---0 ->       2'10 2'10
  transition:       2'10 7'000---1 ->       2'00 2'00
  transition:       2'10 7'1--0000 ->       2'10 2'10
  transition:       2'10 7'1--0001 ->       2'00 2'00
  transition:       2'10 7'1--100- ->       2'10 2'10
  transition:       2'10 7'1---10- ->       2'01 2'01
  transition:       2'10 7'1----1- ->       2'00 2'00
  transition:       2'10 7'-1-0000 ->       2'10 2'10
  transition:       2'10 7'-1-0001 ->       2'00 2'00
  transition:       2'10 7'-1-100- ->       2'00 2'00
  transition:       2'10 7'-1--10- ->       2'10 2'10
  transition:       2'10 7'-1---1- ->       2'00 2'00
  transition:       2'10 7'--10000 ->       2'10 2'10
  transition:       2'10 7'--10001 ->       2'00 2'00
  transition:       2'10 7'--1100- ->       2'00 2'00
  transition:       2'10 7'--1-10- ->       2'00 2'00
  transition:       2'10 7'--1--1- ->       2'00 2'00
  transition:       2'01 7'000---0 ->       2'01 2'01
  transition:       2'01 7'000---1 ->       2'00 2'00
  transition:       2'01 7'1--0000 ->       2'01 2'01
  transition:       2'01 7'1--0001 ->       2'00 2'00
  transition:       2'01 7'1--100- ->       2'10 2'10
  transition:       2'01 7'1---10- ->       2'01 2'01
  transition:       2'01 7'1----1- ->       2'00 2'00
  transition:       2'01 7'-1-0000 ->       2'01 2'01
  transition:       2'01 7'-1-0001 ->       2'00 2'00
  transition:       2'01 7'-1-100- ->       2'00 2'00
  transition:       2'01 7'-1--10- ->       2'10 2'10
  transition:       2'01 7'-1---1- ->       2'00 2'00
  transition:       2'01 7'--10000 ->       2'01 2'01
  transition:       2'01 7'--10001 ->       2'00 2'00
  transition:       2'01 7'--1100- ->       2'00 2'00
  transition:       2'01 7'--1-10- ->       2'00 2'00
  transition:       2'01 7'--1--1- ->       2'00 2'00

3.7.3. Executing FSM_OPT pass (simple optimizations of FSMs).
Optimizing FSM `$fsm$\n_state$310' from module `\vending_machine_18105070'.
  Merging pattern 7'--10000 and 7'--10001 from group (0 0 2'00).
  Merging pattern 7'-1-0000 and 7'-1-0001 from group (0 0 2'00).
  Merging pattern 7'1--0000 and 7'1--0001 from group (0 0 2'00).
  Merging pattern 7'000---0 and 7'000---1 from group (0 0 2'00).
  Merging pattern 7'--10001 and 7'--10000 from group (0 0 2'00).
  Merging pattern 7'-1-0001 and 7'-1-0000 from group (0 0 2'00).
  Merging pattern 7'1--0001 and 7'1--0000 from group (0 0 2'00).
  Merging pattern 7'000---1 and 7'000---0 from group (0 0 2'00).
  Merging pattern 7'--1000- and 7'--1100- from group (0 0 2'00).
  Merging pattern 7'-1-000- and 7'-1-100- from group (0 0 2'00).
  Merging pattern 7'--1100- and 7'--1000- from group (0 0 2'00).
  Merging pattern 7'-1-100- and 7'-1-000- from group (0 0 2'00).
  Merging pattern 7'--1-00- and 7'--1-10- from group (0 0 2'00).
  Merging pattern 7'--1-10- and 7'--1-00- from group (0 0 2'00).
  Merging pattern 7'--1--0- and 7'--1--1- from group (0 0 2'00).
  Merging pattern 7'--1--1- and 7'--1--0- from group (0 0 2'00).

3.7.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \vending_machine_18105070..
Removed 9 unused cells and 9 unused wires.
<suppressed ~10 debug messages>

3.7.5. Executing FSM_OPT pass (simple optimizations of FSMs).
Optimizing FSM `$fsm$\n_state$310' from module `\vending_machine_18105070'.

3.7.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).
Recoding FSM `$fsm$\n_state$310' from module `\vending_machine_18105070' using `auto' encoding:
  mapping auto encoding to `one-hot` for this FSM.
  00 -> --1
  10 -> -1-
  01 -> 1--

3.7.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

FSM `$fsm$\n_state$310' from module `vending_machine_18105070':
-------------------------------------

  Information on FSM $fsm$\n_state$310 (\n_state):

  Number of input signals:    7
  Number of output signals:   2
  Number of state bits:       3

  Input signals:
    0: \rst
    1: $eq$/home/asd01a/Documents/Kelompok_5/source/vending_machine_18105070.v:26$3_Y
    2: $eq$/home/asd01a/Documents/Kelompok_5/source/vending_machine_18105070.v:30$4_Y
    3: $eq$/home/asd01a/Documents/Kelompok_5/source/vending_machine_18105070.v:34$5_Y
    4: $procmux$23_CMP
    5: $procmux$105_CMP
    6: $procmux$196_CMP

  Output signals:
    0: $0\n_state[1:0] [0]
    1: $0\n_state[1:0] [1]

  State encoding:
    0:      3'--1
    1:      3'-1-
    2:      3'1--

  Transition Table (state_in, ctrl_in, state_out, ctrl_out):
      0:     0 7'1--000-   ->     0 2'00
      1:     0 7'-1--00-   ->     0 2'00
      2:     0 7'-1---1-   ->     0 2'00
      3:     0 7'1----1-   ->     0 2'00
      4:     0 7'000----   ->     0 2'00
      5:     0 7'--1----   ->     0 2'00
      6:     0 7'1--100-   ->     1 2'10
      7:     0 7'-1--10-   ->     1 2'10
      8:     0 7'1---10-   ->     2 2'01
      9:     1 7'--10001   ->     0 2'00
     10:     1 7'-1-0001   ->     0 2'00
     11:     1 7'1--0001   ->     0 2'00
     12:     1 7'000---1   ->     0 2'00
     13:     1 7'--1100-   ->     0 2'00
     14:     1 7'-1-100-   ->     0 2'00
     15:     1 7'--1-10-   ->     0 2'00
     16:     1 7'--1--1-   ->     0 2'00
     17:     1 7'-1---1-   ->     0 2'00
     18:     1 7'1----1-   ->     0 2'00
     19:     1 7'--10000   ->     1 2'10
     20:     1 7'-1-0000   ->     1 2'10
     21:     1 7'1--0000   ->     1 2'10
     22:     1 7'000---0   ->     1 2'10
     23:     1 7'1--100-   ->     1 2'10
     24:     1 7'-1--10-   ->     1 2'10
     25:     1 7'1---10-   ->     2 2'01
     26:     2 7'--10001   ->     0 2'00
     27:     2 7'-1-0001   ->     0 2'00
     28:     2 7'1--0001   ->     0 2'00
     29:     2 7'000---1   ->     0 2'00
     30:     2 7'--1100-   ->     0 2'00
     31:     2 7'-1-100-   ->     0 2'00
     32:     2 7'--1-10-   ->     0 2'00
     33:     2 7'--1--1-   ->     0 2'00
     34:     2 7'-1---1-   ->     0 2'00
     35:     2 7'1----1-   ->     0 2'00
     36:     2 7'1--100-   ->     1 2'10
     37:     2 7'-1--10-   ->     1 2'10
     38:     2 7'--10000   ->     2 2'01
     39:     2 7'-1-0000   ->     2 2'01
     40:     2 7'1--0000   ->     2 2'01
     41:     2 7'000---0   ->     2 2'01
     42:     2 7'1---10-   ->     2 2'01

-------------------------------------

3.7.8. Executing FSM_MAP pass (mapping FSMs to basic logic).
Mapping FSM `$fsm$\n_state$310' from module `\vending_machine_18105070'.

3.8. Executing OPT pass (performing simple optimizations).

3.8.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module vending_machine_18105070.
<suppressed ~6 debug messages>

3.8.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\vending_machine_18105070'.
<suppressed ~75 debug messages>
Removed a total of 25 cells.

3.8.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \vending_machine_18105070..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~6 debug messages>

3.8.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \vending_machine_18105070.
Performed a total of 0 changes.

3.8.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\vending_machine_18105070'.
Removed a total of 0 cells.

3.8.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $procdff$306 ($dff) from module vending_machine_18105070 (D = $0\out[0:0], Q = \out).

3.8.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \vending_machine_18105070..
Removed 0 unused cells and 26 unused wires.
<suppressed ~1 debug messages>

3.8.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module vending_machine_18105070.
<suppressed ~1 debug messages>

3.8.9. Rerunning OPT passes. (Maybe there is more to do..)

3.8.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \vending_machine_18105070..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~6 debug messages>

3.8.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \vending_machine_18105070.
Performed a total of 0 changes.

3.8.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\vending_machine_18105070'.
Removed a total of 0 cells.

3.8.13. Executing OPT_DFF pass (perform DFF optimizations).

3.8.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \vending_machine_18105070..

3.8.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module vending_machine_18105070.

3.8.16. Finished OPT passes. (There is nothing left to do.)

3.9. Executing WREDUCE pass (reducing word size of cells).
Removed top 1 bits (of 2) from port B of cell vending_machine_18105070.$eq$/home/asd01a/Documents/Kelompok_5/source/vending_machine_18105070.v:30$4 ($eq).
Removed top 1 bits (of 2) from port B of cell vending_machine_18105070.$procmux$105_CMP0 ($eq).
Removed top 3 bits (of 4) from port B of cell vending_machine_18105070.$auto$fsm_map.cc:77:implement_pattern_cache$323 ($eq).

3.10. Executing PEEPOPT pass (run peephole optimizers).

3.11. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \vending_machine_18105070..

3.12. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module vending_machine_18105070:
  created 0 $alu and 0 $macc cells.

3.13. Executing SHARE pass (SAT-based resource sharing).

3.14. Executing OPT pass (performing simple optimizations).

3.14.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module vending_machine_18105070.

3.14.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\vending_machine_18105070'.
Removed a total of 0 cells.

3.14.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \vending_machine_18105070..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~6 debug messages>

3.14.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \vending_machine_18105070.
Performed a total of 0 changes.

3.14.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\vending_machine_18105070'.
Removed a total of 0 cells.

3.14.6. Executing OPT_DFF pass (perform DFF optimizations).

3.14.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \vending_machine_18105070..

3.14.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module vending_machine_18105070.

3.14.9. Finished OPT passes. (There is nothing left to do.)

3.15. Executing MEMORY pass.

3.15.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

3.15.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

3.15.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

3.15.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).

3.15.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

3.15.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \vending_machine_18105070..

3.15.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

3.15.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

3.15.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \vending_machine_18105070..

3.15.10. Executing MEMORY_COLLECT pass (generating $mem cells).

3.16. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \vending_machine_18105070..

3.17. Executing OPT pass (performing simple optimizations).

3.17.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module vending_machine_18105070.
<suppressed ~6 debug messages>

3.17.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\vending_machine_18105070'.
Removed a total of 0 cells.

3.17.3. Executing OPT_DFF pass (perform DFF optimizations).

3.17.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \vending_machine_18105070..
Removed 0 unused cells and 3 unused wires.
<suppressed ~1 debug messages>

3.17.5. Finished fast OPT passes.

3.18. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

3.19. Executing OPT pass (performing simple optimizations).

3.19.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module vending_machine_18105070.

3.19.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\vending_machine_18105070'.
Removed a total of 0 cells.

3.19.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \vending_machine_18105070..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~5 debug messages>

3.19.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \vending_machine_18105070.
Performed a total of 0 changes.

3.19.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\vending_machine_18105070'.
Removed a total of 0 cells.

3.19.6. Executing OPT_SHARE pass.

3.19.7. Executing OPT_DFF pass (perform DFF optimizations).

3.19.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \vending_machine_18105070..

3.19.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module vending_machine_18105070.

3.19.10. Finished OPT passes. (There is nothing left to do.)

3.20. Executing TECHMAP pass (map to technology primitives).

3.20.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/techmap.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu_brent_kung'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.20.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $logic_not.
Using extmapper simplemap for cells of type $eq.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $dff.
Using extmapper simplemap for cells of type $reduce_or.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $reduce_and.
Using extmapper simplemap for cells of type $or.
Using extmapper simplemap for cells of type $dffe.
Using extmapper simplemap for cells of type $ne.
Using extmapper simplemap for cells of type $reduce_bool.
Using template $paramod$97565c3687be688407d1272a293bd9d0ae6852dc\_90_pmux for cells of type $pmux.
Using template $paramod$c5c783b17ab1d780abfad8cfe6563a0a7b47a3b0\_90_pmux for cells of type $pmux.
No more expansions possible.
<suppressed ~175 debug messages>

3.21. Executing OPT pass (performing simple optimizations).

3.21.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module vending_machine_18105070.
<suppressed ~124 debug messages>

3.21.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\vending_machine_18105070'.
<suppressed ~108 debug messages>
Removed a total of 36 cells.

3.21.3. Executing OPT_DFF pass (perform DFF optimizations).

3.21.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \vending_machine_18105070..
Removed 48 unused cells and 168 unused wires.
<suppressed ~49 debug messages>

3.21.5. Finished fast OPT passes.

3.22. Executing ABC pass (technology mapping using ABC).

3.22.1. Extracting gate netlist of module `\vending_machine_18105070' to `<abc-temp-dir>/input.blif'..
Extracted 96 gates and 106 wires to a netlist network with 8 inputs and 6 outputs.

3.22.1.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

3.22.1.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:        1
ABC RESULTS:               NOR cells:        3
ABC RESULTS:              NAND cells:        1
ABC RESULTS:             ORNOT cells:        7
ABC RESULTS:               NOT cells:        4
ABC RESULTS:               MUX cells:        5
ABC RESULTS:                OR cells:       34
ABC RESULTS:            ANDNOT cells:       29
ABC RESULTS:        internal signals:       92
ABC RESULTS:           input signals:        8
ABC RESULTS:          output signals:        6
Removing temp directory.

3.23. Executing OPT pass (performing simple optimizations).

3.23.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module vending_machine_18105070.
<suppressed ~3 debug messages>

3.23.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\vending_machine_18105070'.
Removed a total of 0 cells.

3.23.3. Executing OPT_DFF pass (perform DFF optimizations).

3.23.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \vending_machine_18105070..
Removed 1 unused cells and 82 unused wires.
<suppressed ~2 debug messages>

3.23.5. Finished fast OPT passes.

3.24. Executing HIERARCHY pass (managing design hierarchy).

3.24.1. Analyzing design hierarchy..
Top module:  \vending_machine_18105070

3.24.2. Analyzing design hierarchy..
Top module:  \vending_machine_18105070
Removed 0 unused modules.

3.25. Printing statistics.

=== vending_machine_18105070 ===

   Number of wires:                 87
   Number of wire bits:             93
   Number of public wires:           6
   Number of public wire bits:      10
   Number of ports:                  5
   Number of port bits:              7
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 88
     $_ANDNOT_                      29
     $_AND_                          1
     $_DFFE_PP_                      1
     $_DFF_P_                        4
     $_MUX_                          5
     $_NAND_                         1
     $_NOR_                          3
     $_NOT_                          3
     $_ORNOT_                        7
     $_OR_                          34

3.26. Executing CHECK pass (checking for obvious problems).
Checking module vending_machine_18105070...
Found and reported 0 problems.

4. Executing DFFLIBMAP pass (mapping DFF cells to sequential cells from liberty file).
  cell DFFNEGX1 (noninv, pins=3, area=384.00) is a direct match for cell type $_DFF_N_.
  cell DFFPOSX1 (noninv, pins=3, area=384.00) is a direct match for cell type $_DFF_P_.
  cell DFFSR (noninv, pins=5, area=704.00) is a direct match for cell type $_DFFSR_PNN_.
  final dff cell mappings:
    \DFFNEGX1 _DFF_N_ (.CLK( C), .D( D), .Q( Q));
    \DFFPOSX1 _DFF_P_ (.CLK( C), .D( D), .Q( Q));
    unmapped dff cell: $_DFF_NN0_
    unmapped dff cell: $_DFF_NN1_
    unmapped dff cell: $_DFF_NP0_
    unmapped dff cell: $_DFF_NP1_
    unmapped dff cell: $_DFF_PN0_
    unmapped dff cell: $_DFF_PN1_
    unmapped dff cell: $_DFF_PP0_
    unmapped dff cell: $_DFF_PP1_
    unmapped dff cell: $_DFFSR_NNN_
    unmapped dff cell: $_DFFSR_NNP_
    unmapped dff cell: $_DFFSR_NPN_
    unmapped dff cell: $_DFFSR_NPP_
    \DFFSR _DFFSR_PNN_ (.CLK( C), .D( D), .Q( Q), .R( R), .S( S));
    unmapped dff cell: $_DFFSR_PNP_
    unmapped dff cell: $_DFFSR_PPN_
    unmapped dff cell: $_DFFSR_PPP_

4.1. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).
Mapping DFF cells in module `\vending_machine_18105070':
  mapped 5 $_DFF_P_ cells to \DFFPOSX1 cells.

5. Executing OPT pass (performing simple optimizations).

5.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module vending_machine_18105070.

5.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\vending_machine_18105070'.
Removed a total of 0 cells.

5.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \vending_machine_18105070..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

5.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \vending_machine_18105070.
Performed a total of 0 changes.

5.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\vending_machine_18105070'.
Removed a total of 0 cells.

5.6. Executing OPT_DFF pass (perform DFF optimizations).

5.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \vending_machine_18105070..

5.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module vending_machine_18105070.

5.9. Finished OPT passes. (There is nothing left to do.)

6. Executing ABC pass (technology mapping using ABC).

6.1. Extracting gate netlist of module `\vending_machine_18105070' to `<abc-temp-dir>/input.blif'..
Extracted 84 gates and 92 wires to a netlist network with 8 inputs and 5 outputs.

6.1.1. Executing ABC.
Running ABC command: "/usr/local/share/qflow/bin/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /usr/local/share/qflow/tech/osu035/osu035_stdcells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.01 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "PADINOUT".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Scl_LibertyReadGenlib() skipped cell "PADFC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADNC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADVDD" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADGND" without logic function.
ABC: Library "osu035_stdcells" from "/usr/local/share/qflow/tech/osu035/osu035_stdcells.lib" has 28 cells (11 skipped: 4 seq; 3 tri-state; 4 no func; 0 dont_use).  Time =     0.01 sec
ABC: Memory =    0.51 MB. Time =     0.01 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

6.1.2. Re-integrating ABC results.
ABC RESULTS:            NOR2X1 cells:        1
ABC RESULTS:           XNOR2X1 cells:        1
ABC RESULTS:            NOR3X1 cells:        4
ABC RESULTS:             INVX1 cells:       10
ABC RESULTS:           AOI21X1 cells:        3
ABC RESULTS:           NAND2X1 cells:        7
ABC RESULTS:           NAND3X1 cells:        7
ABC RESULTS:           AOI22X1 cells:        2
ABC RESULTS:           OAI21X1 cells:        9
ABC RESULTS:        internal signals:       79
ABC RESULTS:           input signals:        8
ABC RESULTS:          output signals:        5
Removing temp directory.

7. Executing FLATTEN pass (flatten design).

8. Executing SETUNDEF pass (replace undef values with defined constants).
Removed 0 unused cells and 92 unused wires.

9. Executing IOPADMAP pass (mapping inputs/outputs to IO-PAD cells).
Mapping port vending_machine_18105070.change using BUFX2.
Don't map input port vending_machine_18105070.clk: Missing option -inpad.
Don't map input port vending_machine_18105070.in: Missing option -inpad.
Mapping port vending_machine_18105070.out using BUFX2.
Don't map input port vending_machine_18105070.rst: Missing option -inpad.

10. Executing OPT pass (performing simple optimizations).

10.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module vending_machine_18105070.

10.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\vending_machine_18105070'.
Removed a total of 0 cells.

10.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \vending_machine_18105070..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

10.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \vending_machine_18105070.
Performed a total of 0 changes.

10.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\vending_machine_18105070'.
Removed a total of 0 cells.

10.6. Executing OPT_DFF pass (perform DFF optimizations).

10.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \vending_machine_18105070..

10.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module vending_machine_18105070.

10.9. Finished OPT passes. (There is nothing left to do.)

11. Executing Verilog backend.

11.1. Executing BMUXMAP pass.

11.2. Executing DEMUXMAP pass.
Dumping module `\vending_machine_18105070'.

12. Printing statistics.

=== vending_machine_18105070 ===

   Number of wires:                 50
   Number of wire bits:             57
   Number of public wires:          50
   Number of public wire bits:      57
   Number of ports:                  5
   Number of port bits:              7
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 52
     AOI21X1                         3
     AOI22X1                         2
     BUFX2                           3
     DFFPOSX1                        5
     INVX1                          10
     NAND2X1                         7
     NAND3X1                         7
     NOR2X1                          1
     NOR3X1                          4
     OAI21X1                         9
     XNOR2X1                         1

End of script. Logfile hash: bec30c3d6a, CPU: user 0.25s system 0.02s, MEM: 20.62 MB peak
Yosys 0.46+107 (git sha1 a54f63225, g++ 8.5.0 -fPIC -O3)
Time spent: 61% 2x abc (0 sec), 10% 19x opt_expr (0 sec), ...
Running getpowerground to determine power and ground net names.
getpowerground.tcl  /usr/local/share/qflow/tech/osu035/osu035_stdcells.lef
Running vlogFanout
vlogFanout -l 200 -c 30 -I vending_machine_18105070_nofanout -s nullstring -p /usr/local/share/qflow/tech/osu035/osu035_stdcells.lib -b BUFX2,CLKBUF1 -i A,A -o Y,Y vending_machine_18105070_mapped.v vending_machine_18105070_sized.v

vlogFanout for qflow 1.4.103
Parsing library "osu035_stdcells"
End of library at line 6636
Lib Read:  Processed 6637 lines.
Top internal fanout is 6 (load 379.827) from node n_state[1],
driven by DFFPOSX1 with strength 313.624 (fF driven at latency 200)
Top fanout load-to-strength ratio is 1.21109 (latency = 242.218 ps)
Top input node fanout is 9 (load 239.595) from node rst.
0 gates exceed specified minimum load.
0 buffers were added.
Warning 1: load of 120.106 is 1.09265 times greater than strongest gate NOR3X1
This warning will only be repeated for larger overload ratios.  Warning count reflects
the total number of overloaded nets.
Warning 2: load of 121.269 is 1.10963 times greater than strongest gate XNOR2X1
Warning 3: load of 389.827 is 1.24298 times greater than strongest gate DFFPOSX1
0 gates were changed.

Gate counts by drive strength:

	"1" gates	In: 49    	Out: 49    	+0
	"2" gates	In: 3    	Out: 3    	+0

Number of gates changed: 0
Running vlog2Verilog for antenna cell mapping.
vlog2Verilog -c -p -v vdd -g gnd  -l /usr/local/share/qflow/tech/osu035/osu035_stdcells.lef 
   -o vending_machine_18105070.v vending_machine_18105070_sized.v

Generating RTL verilog and SPICE netlist file in directory
	 /home/asd01a/Documents/Kelompok_5/synthesis
Files:
   Verilog: /home/asd01a/Documents/Kelompok_5/synthesis/vending_machine_18105070.rtl.v
   Verilog: /home/asd01a/Documents/Kelompok_5/synthesis/vending_machine_18105070.rtlnopwr.v
   Verilog: /home/asd01a/Documents/Kelompok_5/synthesis/vending_machine_18105070.rtlbb.v
   Spice:   /home/asd01a/Documents/Kelompok_5/synthesis/vending_machine_18105070.spc

Running vlog2Verilog.
vlog2Verilog -c -v vdd -g gnd  -l /usr/local/share/qflow/tech/osu035/osu035_stdcells.lef 
	-o vending_machine_18105070.rtl.v
   vending_machine_18105070.v
vlog2Verilog -c -p -v vdd -g gnd  -l /usr/local/share/qflow/tech/osu035/osu035_stdcells.lef 
	-o vending_machine_18105070.rtlnopwr.v
   vending_machine_18105070.v
/usr/local/share/qflow/bin/vlog2Verilog -c -p -b -n -v vdd -g gnd  -l /usr/local/share/qflow/tech/osu035/osu035_stdcells.lef
   -o vending_machine_18105070.rtlbb.v
Running vlog2Spice.
vlog2Spice -i -l  /usr/local/share/qflow/tech/osu035/osu035_stdcells.sp -o vending_machine_18105070.spc vending_machine_18105070.rtl.v
Running spi2xspice.py
spi2xspice.py "/usr/local/share/qflow/tech/osu035/osu035_stdcells.lib" vending_machine_18105070.spc vending_machine_18105070.xspice

Synthesis script ended on Mon Jan 6 19:52:54 WIB 2025
